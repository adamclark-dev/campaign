<?php

use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Options callback for field_feature_article_bg.
 *
 * @param FieldStorageDefinitionInterface $definition
 * @param FieldableEntityInterface|NULL $entity
 *
 * @return mixed
 *
 * @see options_allowed_values()
 */
function cr_feature_articles_field_feature_articles_bg(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL) {
  return \Drupal::service('cr.colours.colour_service')
    ->getStandardColoursArray();
}

/**
 * Test to see whether the current variables contain feature articles.
 *
 * @param array $variables
 *
 * @return bool
 */
function cr_feature_articles_is_feature_articles(&$variables) {
  return isset($variables['content'], $variables['content']['#bundle']) &&
    ($variables['content']['#bundle'] === 'cr_feature_articles' ||
      $variables['content']['#bundle'] === 'feature_articles');
}

/**
 * Add articles to feature articles entity view.
 *
 * @param array $variables
 */
function cr_feature_articles_preprocess_ds_entity_view(array &$variables) {
  if (cr_feature_articles_is_feature_articles($variables)) {
    $tid = $variables['content']['field_feature_articles_taxonomy'][0]['#url']
      ->getRouteParameters()['taxonomy_term'];
    $variables['content']['articles'] = \Drupal::service('cr.feature_articles.taxonomy_service')
      ->getArticleNodesByTermId($tid);
  }
}
